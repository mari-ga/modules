// nf-core modules test seurat/multiseq
nextflow_process {

    name "Test Process SEURAT_MULTISEQ"
    script "../main.nf"
    process "SEURAT_MULTISEQ"

    tag "modules"
    tag "modules_nfcore"
    tag "seurat"
    tag "seurat/multiseq"
    tag "untar"

    test("Standard_Multiome - 10x mtx") {
        config "./nextflow.config"
        setup {
            run("UNTAR", alias:"UNTAR_HTO") {
                script "modules/nf-core/untar/main.nf"
                process {
                """
                input[0] = Channel.of([ [],file(params.modules_testdata_base_path + "/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/hto.tar.gz", checkIfExists: true)   ])
                """
                }
            } 
            run("UNTAR", alias:"UNTAR_RNA") {
                script "modules/nf-core/untar/main.nf"
                process {
                """
                input[0] = Channel.of([ [],file(params.modules_testdata_base_path + "/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/rna.tar.gz", checkIfExists: true)   ])
                """
                }
            }
        }
        when {
            process {
                """
                input[0] = UNTAR_HTO.out.untar.map { meta, files -> [ [ id:'test', single_end:true ], files ] }
                input[1] = UNTAR_RNA.out.untar.map { meta, files -> [ [ id:'test', single_end:true ], files ] }
                input[2] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.assignment.get(0).get(1)).exists() },
                { assert path(process.out.classification.get(0).get(1)).exists() },
                { assert path(process.out.session_info.get(0).get(1)).exists() },
            )
        }

    }
    test("Standard_Multiome - plots included - 10x mtx") {
        // Test including creation of R object to use with visualisation module
        config "./nextflow.config"
        setup {
            run("UNTAR", alias:"UNTAR_HTO") {
                script "modules/nf-core/untar/main.nf"
                process {
                """
                input[0] = Channel.of([ [],file(params.modules_testdata_base_path + "/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/hto.tar.gz", checkIfExists: true)   ])
                """
                }
            } 
            run("UNTAR", alias:"UNTAR_RNA") {
                script "modules/nf-core/untar/main.nf"
                process {
                """
                input[0] = Channel.of([ [],file(params.modules_testdata_base_path + "/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/rna.tar.gz", checkIfExists: true)   ])
                """
                }
            }
        }
        when {
            process {
                """
                input[0] = UNTAR_HTO.out.untar.map { meta, files -> [ [ id:'test', single_end:true ], files ] }
                input[1] = UNTAR_RNA.out.untar.map { meta, files -> [ [ id:'test', single_end:true ], files ] }
                input[2] = true
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.assignment.get(0).get(1)).exists() },
                { assert path(process.out.classification.get(0).get(1)).exists() },
                { assert path(process.out.session_info.get(0).get(1)).exists() },
            )
        }

    }

    test("Standard_Multiome - 10x mtx - stub") {
        config "./nextflow.config"
        options "-stub"

        when {
            process {
                """
                
                input[0] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + "/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/hto.tar.gz", checkIfExists: true),
                ]
                input[1] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + "/genomics/homo_sapiens/10xgenomics/cellranger/hashing_demultiplexing/rna.tar.gz", checkIfExists: true),
                ]
                input[2] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.assignment.get(0).get(1)).exists() },
                { assert path(process.out.classification.get(0).get(1)).exists() },
                { assert path(process.out.session_info.get(0).get(1)).exists() },
            )
        }

    }
}

    

